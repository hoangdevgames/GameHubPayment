{"version":3,"file":"static/js/311.d84e18b4.chunk.js","mappings":"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","sources":["services/oauthFSLAuth.js"],"sourcesContent":["import { API_CONFIG } from './fslConfig';\n\n/**\n * OAuth-based FSL Authentication Service\n * \n * Flow:\n * 1. OAuth Authentication ‚Üí Get access token\n * 2. User Identity Verification ‚Üí Compare with /app/marketUserData\n * 3. FSL SDK Payment ‚Üí Use access token for blockchain operations\n */\nclass OAuthFSLAuthService {\n  constructor() {\n    this.accessToken = null;\n    this.currentUser = null;\n    this.fslAuth = null;\n    this.isInitialized = false;\n    this.isDevelopment = process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost';\n    \n    // FSL OAuth Configuration\n    this.FSL_OAUTH_URL = 'https://9ijsflpfgm3.joysteps.io/api/account/oauth/authorize';\n    this.FSL_USER_PROFILE_URL = 'https://9ijsflpfgm3.joysteps.io/api/account/party/user';\n    this.APP_KEY = 'MiniGame';\n    this.REDIRECT_URI = window.location.href; // Use current web URL\n    \n\n  }\n\n  /**\n   * Phase 1: OAuth Authentication\n   * Redirect user to FSL OAuth for authentication\n   */\n  async authenticateWithOAuth() {\n    try {\n      console.log('üîÑ Starting OAuth authentication...');\n      \n      const params = new URLSearchParams({\n        response_type: 'token',\n        appkey: this.APP_KEY,\n        redirect_uri: encodeURIComponent(this.REDIRECT_URI),\n        scope: 'basic',\n        state: 'test',\n      });\n      \n      const oauthUrl = `${this.FSL_OAUTH_URL}?${params.toString()}`;\n      console.log('üîó OAuth URL:', oauthUrl);\n      \n      // Redirect to FSL OAuth\n      window.location.href = oauthUrl;\n      \n    } catch (error) {\n      console.error('‚ùå OAuth authentication failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle OAuth callback and extract access token\n   * This should be called from the callback page\n   */\n  handleOAuthCallback() {\n    try {\n      console.log('üîÑ Handling OAuth callback...');\n      \n      // Get access token from URL fragment\n      const fragment = window.location.hash.substring(1);\n      const params = new URLSearchParams(fragment);\n      \n      this.accessToken = params.get('access_token');\n      const state = params.get('state');\n      const error = params.get('error');\n      \n      console.log('üîç OAuth callback params:', { accessToken: !!this.accessToken, state, error });\n      \n      if (error) {\n        throw new Error(`OAuth error: ${error}`);\n      }\n      \n      if (!this.accessToken) {\n        throw new Error('No access token received from OAuth');\n      }\n      \n      // Store access token\n      localStorage.setItem('fsl_access_token', this.accessToken);\n      localStorage.setItem('fsl_oauth_timestamp', Date.now().toString());\n      \n      console.log('‚úÖ OAuth callback successful, access token stored');\n      \n      return {\n        success: true,\n        accessToken: this.accessToken,\n        state: state\n      };\n      \n    } catch (error) {\n      console.error('‚ùå OAuth callback handling failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Get stored access token or trigger re-authentication\n   */\n  async getAccessToken() {\n    try {\n      // Check if we have a valid access token\n      const storedToken = localStorage.getItem('fsl_access_token');\n      const timestamp = localStorage.getItem('fsl_oauth_timestamp');\n      \n      if (storedToken && timestamp) {\n        const tokenAge = Date.now() - parseInt(timestamp);\n        const tokenLifetime = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n        \n        if (tokenAge < tokenLifetime) {\n          this.accessToken = storedToken;\n          console.log('‚úÖ Using stored access token');\n          return this.accessToken;\n        } else {\n          console.log('‚ö†Ô∏è Access token expired, clearing...');\n          this.clearStoredTokens();\n        }\n      }\n      \n      // No valid token, need to authenticate\n      console.log('üîÑ No valid access token, redirecting to OAuth...');\n      await this.authenticateWithOAuth();\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get access token:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clear stored OAuth tokens\n   */\n  clearStoredTokens() {\n    localStorage.removeItem('fsl_access_token');\n    localStorage.removeItem('fsl_oauth_timestamp');\n    this.accessToken = null;\n    console.log('üóëÔ∏è Stored tokens cleared');\n  }\n\n  /**\n   * Phase 2: User Identity Verification\n   * Get user profile from FSL API and verify with /app/marketUserData\n   */\n  async verifyUserIdentity() {\n    try {\n      console.log('üîç Verifying user identity...');\n      \n      if (!this.accessToken) {\n        throw new Error('No access token available');\n      }\n\n      // Get user profile from FSL API\n      const fslUserProfile = await this.getFSLUserProfile();\n      console.log('üìä FSL User Profile:', fslUserProfile);\n      \n      // Get market user data from your API\n      const marketUserData = await this.getMarketUserData();\n      console.log('üìä Market User Data:', marketUserData);\n      \n      // Compare FSL IDs\n      const fslId = fslUserProfile.data?.fslUid || fslUserProfile.data?.uid;\n      const marketFSLId = marketUserData.fslId;\n      \n      console.log('üîç Comparing FSL IDs:');\n      console.log('  FSL API FSL ID:', fslId);\n      console.log('  Market API FSL ID:', marketFSLId);\n      \n      if (!fslId || !marketFSLId) {\n        throw new Error('Missing FSL ID from one or both sources');\n      }\n      \n      const isMatch = fslId.toString() === marketFSLId.toString();\n      console.log('‚úÖ FSL ID match:', isMatch);\n      \n      if (isMatch) {\n        // Store verified user data\n        this.currentUser = {\n          fslId: fslId,\n          fslProfile: fslUserProfile.data,\n          marketProfile: marketUserData,\n          isVerified: true,\n          verifiedAt: new Date().toISOString()\n        };\n        \n        console.log('‚úÖ User identity verified:', this.currentUser);\n        return {\n          success: true,\n          user: this.currentUser,\n          fslId: fslId\n        };\n      } else {\n        throw new Error('FSL ID mismatch. User may be logged into different account.');\n      }\n      \n    } catch (error) {\n      console.error('‚ùå User identity verification failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Get user profile from FSL API using access token\n   */\n  async getFSLUserProfile() {\n    try {\n      console.log('üì° Getting FSL user profile...');\n      \n      const response = await fetch(this.FSL_USER_PROFILE_URL, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`FSL API error: ${response.status} ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      console.log('‚úÖ FSL user profile received:', data);\n      \n      return data;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get FSL user profile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get market user data from your API\n   */\n  async getMarketUserData() {\n    try {\n      console.log('üì° Getting market user data...');\n      \n      // This should call your existing /app/marketUserData API\n      // You'll need to implement this based on your current implementation\n      const response = await fetch(`${API_CONFIG.server_url}/api/app/marketUserData`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          // Add any required headers (auth tokens, etc.)\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Market API error: ${response.status} ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      console.log('‚úÖ Market user data received:', data);\n      \n      return data;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to get market user data:', error);\n      throw error;\n    }\n  }\n\n\n\n\n\n\n\n\n\n  /**\n   * Check if user is authenticated and verified\n   */\n  isUserAuthenticated() {\n    return !!(this.accessToken && this.currentUser?.isVerified);\n  }\n\n  /**\n   * Get current user info\n   */\n  getCurrentUser() {\n    return this.currentUser;\n  }\n\n  /**\n   * Get access token for FSL SDK to use\n   */\n  getAccessTokenForFSL() {\n    return this.accessToken;\n  }\n\n  /**\n   * Logout and clear all data\n   */\n  logout() {\n    this.clearStoredTokens();\n    this.currentUser = null;\n    this.fslAuth = null;\n    this.isInitialized = false;\n    console.log('‚úÖ User logged out successfully');\n  }\n}\n\nconst oauthFSLAuthService = new OAuthFSLAuthService();\nexport default oauthFSLAuthService;\n"],"names":["constructor","this","accessToken","currentUser","fslAuth","isInitialized","isDevelopment","window","location","hostname","FSL_OAUTH_URL","FSL_USER_PROFILE_URL","APP_KEY","REDIRECT_URI","href","authenticateWithOAuth","console","log","params","URLSearchParams","response_type","appkey","redirect_uri","encodeURIComponent","scope","state","oauthUrl","toString","error","handleOAuthCallback","fragment","hash","substring","get","Error","localStorage","setItem","Date","now","success","message","getAccessToken","storedToken","getItem","timestamp","tokenAge","parseInt","clearStoredTokens","removeItem","verifyUserIdentity","_fslUserProfile$data","_fslUserProfile$data2","fslUserProfile","getFSLUserProfile","marketUserData","getMarketUserData","fslId","data","fslUid","uid","marketFSLId","isMatch","fslProfile","marketProfile","isVerified","verifiedAt","toISOString","user","response","fetch","method","headers","ok","status","statusText","json","API_CONFIG","server_url","isUserAuthenticated","_this$currentUser","getCurrentUser","getAccessTokenForFSL","logout"],"sourceRoot":""}