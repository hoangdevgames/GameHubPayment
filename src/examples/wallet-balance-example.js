/**
 * Example: S·ª≠ d·ª•ng FSL Authorization ƒë·ªÉ l·∫•y ƒë·ªãa ch·ªâ v√≠ v√† GMT balance
 * 
 * File n√†y demo c√°ch s·ª≠ d·ª•ng c√°c methods m·ªõi trong fslAuthService
 */

import fslAuthService from '../services/fslAuth.js';

// Example 1: L·∫•y ƒë·ªãa ch·ªâ v√≠ hi·ªán t·∫°i cho t·ª´ng chain
async function getWalletAddressExample() {
  try {
    console.log('=== Example 1: L·∫•y ƒë·ªãa ch·ªâ v√≠ ===');
    
    // L·∫•y ƒë·ªãa ch·ªâ Solana wallet
    const solanaAddress = await fslAuthService.getCurrentWalletAddress('solana');
    console.log('Solana Address:', solanaAddress);
    
    // L·∫•y ƒë·ªãa ch·ªâ Polygon wallet
    const polygonAddress = await fslAuthService.getCurrentWalletAddress('polygon');
    console.log('Polygon Address:', polygonAddress);
    
    // L·∫•y ƒë·ªãa ch·ªâ Ethereum wallet
    const ethereumAddress = await fslAuthService.getCurrentWalletAddress('ethereum');
    console.log('Ethereum Address:', ethereumAddress);
    
  } catch (error) {
    console.error('Error getting wallet addresses:', error);
  }
}

// Example 2: L·∫•y GMT balance v·ªõi ƒë·ªãa ch·ªâ v√≠ t·ª± ƒë·ªông
async function getGMTBalanceExample() {
  try {
    console.log('=== Example 2: L·∫•y GMT Balance t·ª± ƒë·ªông ===');
    
    // L·∫•y Solana GMT balance (t·ª± ƒë·ªông l·∫•y ƒë·ªãa ch·ªâ v√≠)
    const solanaInfo = await fslAuthService.getSolanaGMTBalanceWithAddress();
    console.log('Solana GMT Info:', {
      address: solanaInfo.walletAddress,
      balance: solanaInfo.balance + ' GMT',
      chain: solanaInfo.chain
    });
    
    // L·∫•y Polygon GMT balance (t·ª± ƒë·ªông l·∫•y ƒë·ªãa ch·ªâ v√≠)
    const polygonInfo = await fslAuthService.getPolygonGMTBalanceWithAddress();
    console.log('Polygon GMT Info:', {
      address: polygonInfo.walletAddress,
      balance: polygonInfo.balance + ' GMT',
      chain: polygonInfo.chain,
      chainId: polygonInfo.chainId
    });
    
  } catch (error) {
    console.error('Error getting GMT balances:', error);
  }
}

// Example 3: L·∫•y t·∫•t c·∫£ th√¥ng tin wallet m·ªôt l·∫ßn
async function getAllWalletInfoExample() {
  try {
    console.log('=== Example 3: L·∫•y t·∫•t c·∫£ th√¥ng tin wallet ===');
    
    const allWalletInfo = await fslAuthService.getAllWalletInfo();
    
    console.log('Complete Wallet Info:', {
      user: allWalletInfo.user,
      wallets: {
        solana: allWalletInfo.wallets.solana,
        polygon: allWalletInfo.wallets.polygon,
        ethereum: allWalletInfo.wallets.ethereum
      },
      balances: {
        solanaGMT: allWalletInfo.balances.solanaGMT + ' GMT',
        polygonGMT: allWalletInfo.balances.polygonGMT + ' GMT'
      },
      timestamp: allWalletInfo.timestamp
    });
    
    return allWalletInfo;
    
  } catch (error) {
    console.error('Error getting all wallet info:', error);
  }
}

// Example 4: S·ª≠ d·ª•ng tr·ª±c ti·∫øp 2 h√†m GMT balance c≈© (v·ªõi wallet address manual)
async function manualGMTBalanceExample() {
  try {
    console.log('=== Example 4: Manual GMT Balance Check ===');
    
    // N·∫øu b·∫°n ƒë√£ c√≥ wallet address
    const solanaWallet = 'YOUR_SOLANA_WALLET_ADDRESS';
    const polygonWallet = 'YOUR_POLYGON_WALLET_ADDRESS';
    
    // S·ª≠ d·ª•ng h√†m c≈©
    const solanaBalance = await fslAuthService.getSolanaGMTBalance(solanaWallet);
    console.log(`Solana GMT Balance for ${solanaWallet}:`, solanaBalance);
    
    const polygonBalance = await fslAuthService.getPolygonGMTBalance(polygonWallet);
    console.log(`Polygon GMT Balance for ${polygonWallet}:`, polygonBalance);
    
  } catch (error) {
    console.error('Error getting manual GMT balances:', error);
  }
}

// Main example function
export async function runWalletBalanceExamples() {
  console.log('üöÄ Starting Wallet Balance Examples...');
  
  // ƒê·∫£m b·∫£o user ƒë√£ login
  if (!fslAuthService.getCurrentUser()) {
    console.log('‚ö†Ô∏è User not logged in. Please login first.');
    return;
  }
  
  try {
    // Run all examples
    await getWalletAddressExample();
    console.log('\n');
    
    await getGMTBalanceExample(); 
    console.log('\n');
    
    const allInfo = await getAllWalletInfoExample();
    console.log('\n');
    
    // Uncomment below if you want to test manual method
    // await manualGMTBalanceExample();
    
    console.log('‚úÖ All examples completed successfully!');
    return allInfo;
    
  } catch (error) {
    console.error('‚ùå Examples failed:', error);
  }
}

// Export individual functions for usage
export {
  getWalletAddressExample,
  getGMTBalanceExample, 
  getAllWalletInfoExample,
  manualGMTBalanceExample
};